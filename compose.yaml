version: "3.7"
services:
  # Caddy Proxy Server to link all forward facing web apps to the outside world
  # This is the only container that should have outward facing ports. Everything else
  # should be proxied through it
  proxy:
    image: lucaslorentz/caddy-docker-proxy:ci-alpine
    environment:
      - CADDY_INGRESS_NETWORKS=proxied
    networks:
      - proxied
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - proxy_data:/data
      - /var/log/caddy:/var/log/caddy
    ports:
      - 80:80
      - 443:443
    restart: unless-stopped

  # Manage the server using compose files
  yacht:
    image: selfhostedpro/yacht
    container_name: yacht
    depends_on:
      - proxy
    networks:
      - proxied
    volumes:
      - yacht:/config
      - type: bind
        source: /home/jmmarsde/apps_config/compose.yaml
        target: /config/compose/server/docker-compose.yml
      - /var/run/docker.sock:/var/run/docker.sock
    restart: unless-stopped
    labels:
      caddy: yacht.johnmarsden.dev
      caddy.reverse_proxy: "{{ upstreams 8000 }}"

  # Support sending push notifications to my phone and other devices
  ntfy:
    image: binwiederhier/ntfy
    container_name: ntfy
    depends_on:
      - proxy
    command:
      - serve
    networks:
      - proxied
    volumes:
      - /var/cache/ntfy:/var/cache/ntfy
      - /var/lib/ntfy:/var/lib/ntfy
      - /etc/ntfy:/etc/ntfy
    environment:
      - TZ="America/New_York"
    healthcheck:
      test: ["CMD-SHELL", "wget -q --tries=1 http://localhost:80/v1/health -O - | grep -Eo '\"healthy\"\\s*:\\s*true' || exit 1"]
      interval: 60s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    labels:
      caddy: "ntfy.johnmarsden.dev"
      caddy.reverse_proxy: "{{ upstreams 80 }}"
      caddy.@httpget.protocol: "http"
      caddy.@httpget.method: "GET"
      caddy.@httpget.path_regexp: "^/([-_a-z0-9]{0,64}$|docs/|static/)"
      caddy.redir: "@httpget https://{host}{uri}"


networks:
  proxied:
    name: proxied
    driver: bridge
  yacht:
    driver: bridge

volumes:
  yacht: {}
  proxy_data: {}
